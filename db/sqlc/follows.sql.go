// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: follows.sql

package sqlc

import (
	"context"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO follows (
    following_user_id, followed_user_id
) VALUES (
    $1, $2
) RETURNING following_user_id, followed_user_id, created_at
`

type CreateFollowParams struct {
	FollowingUserID int32 `json:"following_user_id"`
	FollowedUserID  int32 `json:"followed_user_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, createFollow, arg.FollowingUserID, arg.FollowedUserID)
	var i Follow
	err := row.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.CreatedAt)
	return i, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
WHERE following_user_id = $1
`

func (q *Queries) DeleteFollow(ctx context.Context, followingUserID int32) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, followingUserID)
	return err
}

const getFollower = `-- name: GetFollower :one
SELECT following_user_id, followed_user_id, created_at FROM follows
WHERE followed_user_id = $1 LIMIT 1
`

func (q *Queries) GetFollower(ctx context.Context, followedUserID int32) (Follow, error) {
	row := q.db.QueryRowContext(ctx, getFollower, followedUserID)
	var i Follow
	err := row.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.CreatedAt)
	return i, err
}

const getFollowing = `-- name: GetFollowing :one
SELECT following_user_id, followed_user_id, created_at FROM follows
WHERE following_user_id = $1 LIMIT 1
`

func (q *Queries) GetFollowing(ctx context.Context, followingUserID int32) (Follow, error) {
	row := q.db.QueryRowContext(ctx, getFollowing, followingUserID)
	var i Follow
	err := row.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.CreatedAt)
	return i, err
}

const listFollower = `-- name: ListFollower :many
SELECT following_user_id, followed_user_id, created_at FROM follows
ORDER BY followed_user_id
LIMIT $1
OFFSET $2
`

type ListFollowerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFollower(ctx context.Context, arg ListFollowerParams) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, listFollower, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowing = `-- name: ListFollowing :many
SELECT following_user_id, followed_user_id, created_at FROM follows
ORDER BY following_user_id
LIMIT $1
OFFSET $2
`

type ListFollowingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFollowing(ctx context.Context, arg ListFollowingParams) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, listFollowing, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.FollowingUserID, &i.FollowedUserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
